// Code generated by protoc-gen-gogo.
// source: diff.proto
// DO NOT EDIT!

/*
	Package iterator is a generated protocol buffer package.

	It is generated from these files:
		diff.proto

	It has these top-level messages:
		SingleKVDiff
		SingleKVTableDiffs
		Diff
*/
package iterator

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "gogo/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SingleKVDiff struct {
	DiffType      int    `protobuf:"varint,1,opt,name=diffType,proto3,casttype=int" json:"diffType,omitempty"`
	Idx           uint64 `protobuf:"varint,2,opt,name=idx,proto3" json:"idx,omitempty"`
	KeyExpected   []byte `protobuf:"bytes,3,opt,name=keyExpected,proto3" json:"keyExpected,omitempty"`
	ValueExpected []byte `protobuf:"bytes,4,opt,name=valueExpected,proto3" json:"valueExpected,omitempty"`
	KeyActual     []byte `protobuf:"bytes,5,opt,name=keyActual,proto3" json:"keyActual,omitempty"`
	ValueActual   []byte `protobuf:"bytes,6,opt,name=valueActual,proto3" json:"valueActual,omitempty"`
}

func (m *SingleKVDiff) Reset()                    { *m = SingleKVDiff{} }
func (m *SingleKVDiff) String() string            { return proto.CompactTextString(m) }
func (*SingleKVDiff) ProtoMessage()               {}
func (*SingleKVDiff) Descriptor() ([]byte, []int) { return fileDescriptorDiff, []int{0} }

type SingleKVTableDiffs struct {
	TableName string         `protobuf:"bytes,1,opt,name=tableName,proto3" json:"tableName,omitempty"`
	KVDiffs   []SingleKVDiff `protobuf:"bytes,2,rep,name=kVDiffs" json:"kVDiffs"`
}

func (m *SingleKVTableDiffs) Reset()                    { *m = SingleKVTableDiffs{} }
func (m *SingleKVTableDiffs) String() string            { return proto.CompactTextString(m) }
func (*SingleKVTableDiffs) ProtoMessage()               {}
func (*SingleKVTableDiffs) Descriptor() ([]byte, []int) { return fileDescriptorDiff, []int{1} }

func (m *SingleKVTableDiffs) GetKVDiffs() []SingleKVDiff {
	if m != nil {
		return m.KVDiffs
	}
	return nil
}

type Diff struct {
	Path       string               `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	TableDiffs []SingleKVTableDiffs `protobuf:"bytes,2,rep,name=tableDiffs" json:"tableDiffs"`
}

func (m *Diff) Reset()                    { *m = Diff{} }
func (m *Diff) String() string            { return proto.CompactTextString(m) }
func (*Diff) ProtoMessage()               {}
func (*Diff) Descriptor() ([]byte, []int) { return fileDescriptorDiff, []int{2} }

func (m *Diff) GetTableDiffs() []SingleKVTableDiffs {
	if m != nil {
		return m.TableDiffs
	}
	return nil
}

func init() {
	proto.RegisterType((*SingleKVDiff)(nil), "iterator.SingleKVDiff")
	proto.RegisterType((*SingleKVTableDiffs)(nil), "iterator.SingleKVTableDiffs")
	proto.RegisterType((*Diff)(nil), "iterator.Diff")
}
func (m *SingleKVDiff) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SingleKVDiff) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DiffType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDiff(dAtA, i, uint64(m.DiffType))
	}
	if m.Idx != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDiff(dAtA, i, uint64(m.Idx))
	}
	if len(m.KeyExpected) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDiff(dAtA, i, uint64(len(m.KeyExpected)))
		i += copy(dAtA[i:], m.KeyExpected)
	}
	if len(m.ValueExpected) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDiff(dAtA, i, uint64(len(m.ValueExpected)))
		i += copy(dAtA[i:], m.ValueExpected)
	}
	if len(m.KeyActual) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDiff(dAtA, i, uint64(len(m.KeyActual)))
		i += copy(dAtA[i:], m.KeyActual)
	}
	if len(m.ValueActual) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintDiff(dAtA, i, uint64(len(m.ValueActual)))
		i += copy(dAtA[i:], m.ValueActual)
	}
	return i, nil
}

func (m *SingleKVTableDiffs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SingleKVTableDiffs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TableName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDiff(dAtA, i, uint64(len(m.TableName)))
		i += copy(dAtA[i:], m.TableName)
	}
	if len(m.KVDiffs) > 0 {
		for _, msg := range m.KVDiffs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDiff(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Diff) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Diff) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDiff(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if len(m.TableDiffs) > 0 {
		for _, msg := range m.TableDiffs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDiff(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Diff(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Diff(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDiff(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SingleKVDiff) Size() (n int) {
	var l int
	_ = l
	if m.DiffType != 0 {
		n += 1 + sovDiff(uint64(m.DiffType))
	}
	if m.Idx != 0 {
		n += 1 + sovDiff(uint64(m.Idx))
	}
	l = len(m.KeyExpected)
	if l > 0 {
		n += 1 + l + sovDiff(uint64(l))
	}
	l = len(m.ValueExpected)
	if l > 0 {
		n += 1 + l + sovDiff(uint64(l))
	}
	l = len(m.KeyActual)
	if l > 0 {
		n += 1 + l + sovDiff(uint64(l))
	}
	l = len(m.ValueActual)
	if l > 0 {
		n += 1 + l + sovDiff(uint64(l))
	}
	return n
}

func (m *SingleKVTableDiffs) Size() (n int) {
	var l int
	_ = l
	l = len(m.TableName)
	if l > 0 {
		n += 1 + l + sovDiff(uint64(l))
	}
	if len(m.KVDiffs) > 0 {
		for _, e := range m.KVDiffs {
			l = e.Size()
			n += 1 + l + sovDiff(uint64(l))
		}
	}
	return n
}

func (m *Diff) Size() (n int) {
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovDiff(uint64(l))
	}
	if len(m.TableDiffs) > 0 {
		for _, e := range m.TableDiffs {
			l = e.Size()
			n += 1 + l + sovDiff(uint64(l))
		}
	}
	return n
}

func sovDiff(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDiff(x uint64) (n int) {
	return sovDiff(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SingleKVDiff) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiff
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleKVDiff: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleKVDiff: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiffType", wireType)
			}
			m.DiffType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiffType |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idx", wireType)
			}
			m.Idx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Idx |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyExpected", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDiff
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyExpected = append(m.KeyExpected[:0], dAtA[iNdEx:postIndex]...)
			if m.KeyExpected == nil {
				m.KeyExpected = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueExpected", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDiff
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueExpected = append(m.ValueExpected[:0], dAtA[iNdEx:postIndex]...)
			if m.ValueExpected == nil {
				m.ValueExpected = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyActual", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDiff
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyActual = append(m.KeyActual[:0], dAtA[iNdEx:postIndex]...)
			if m.KeyActual == nil {
				m.KeyActual = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueActual", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDiff
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueActual = append(m.ValueActual[:0], dAtA[iNdEx:postIndex]...)
			if m.ValueActual == nil {
				m.ValueActual = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiff(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiff
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SingleKVTableDiffs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiff
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleKVTableDiffs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleKVTableDiffs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiff
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KVDiffs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiff
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KVDiffs = append(m.KVDiffs, SingleKVDiff{})
			if err := m.KVDiffs[len(m.KVDiffs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiff(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiff
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Diff) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiff
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Diff: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Diff: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiff
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableDiffs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiff
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableDiffs = append(m.TableDiffs, SingleKVTableDiffs{})
			if err := m.TableDiffs[len(m.TableDiffs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiff(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiff
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDiff(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDiff
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDiff
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDiff
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDiff
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDiff
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDiff(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDiff = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDiff   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("diff.proto", fileDescriptorDiff) }

var fileDescriptorDiff = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0xc9, 0x4c, 0x4b,
	0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xc8, 0x2c, 0x49, 0x2d, 0x4a, 0x2c, 0xc9, 0x2f,
	0x92, 0x92, 0x4c, 0xcf, 0x4f, 0xcf, 0xd7, 0x07, 0x11, 0x60, 0x19, 0x30, 0x0b, 0xa2, 0x48, 0xe9,
	0x2c, 0x23, 0x17, 0x4f, 0x70, 0x66, 0x5e, 0x7a, 0x4e, 0xaa, 0x77, 0x98, 0x4b, 0x66, 0x5a, 0x9a,
	0x90, 0x32, 0x17, 0x07, 0xc8, 0x8c, 0x90, 0xca, 0x82, 0x54, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x66,
	0x27, 0xf6, 0x5f, 0xf7, 0xe4, 0x99, 0x33, 0xf3, 0x4a, 0x82, 0xe0, 0x12, 0x42, 0x02, 0x5c, 0xcc,
	0x99, 0x29, 0x15, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x2c, 0x41, 0x20, 0xa6, 0x90, 0x02, 0x17, 0x77,
	0x76, 0x6a, 0xa5, 0x6b, 0x45, 0x41, 0x6a, 0x72, 0x49, 0x6a, 0x8a, 0x04, 0xb3, 0x02, 0xa3, 0x06,
	0x4f, 0x10, 0xb2, 0x90, 0x90, 0x0a, 0x17, 0x6f, 0x59, 0x62, 0x4e, 0x69, 0x2a, 0x5c, 0x0d, 0x0b,
	0x58, 0x0d, 0xaa, 0xa0, 0x90, 0x0c, 0x17, 0x67, 0x76, 0x6a, 0xa5, 0x63, 0x72, 0x49, 0x69, 0x62,
	0x8e, 0x04, 0x2b, 0x58, 0x05, 0x42, 0x00, 0x64, 0x0b, 0x58, 0x39, 0x54, 0x9e, 0x0d, 0x62, 0x0b,
	0x92, 0x90, 0x52, 0x16, 0x97, 0x10, 0xcc, 0x3b, 0x21, 0x89, 0x49, 0x39, 0xa9, 0x20, 0x3f, 0x15,
	0x83, 0x4c, 0x2d, 0x01, 0xf1, 0xfc, 0x12, 0x73, 0x21, 0xbe, 0xe2, 0x0c, 0x42, 0x08, 0x08, 0x99,
	0x71, 0xb1, 0x67, 0x83, 0x3d, 0x5f, 0x2c, 0xc1, 0xa4, 0xc0, 0xac, 0xc1, 0x6d, 0x24, 0xa6, 0x07,
	0x0b, 0x3a, 0x3d, 0xe4, 0xb0, 0x71, 0x62, 0x39, 0x71, 0x4f, 0x9e, 0x21, 0x08, 0xa6, 0x58, 0x29,
	0x8e, 0x8b, 0x05, 0x1c, 0x64, 0x42, 0x5c, 0x2c, 0x05, 0x89, 0x25, 0x19, 0x50, 0x83, 0xc1, 0x6c,
	0x21, 0x27, 0x2e, 0xae, 0x12, 0xb8, 0xfd, 0x50, 0x63, 0x65, 0x30, 0x8d, 0x45, 0xb8, 0x11, 0x6a,
	0x38, 0x92, 0x2e, 0x27, 0x81, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48,
	0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x24, 0x36, 0x70, 0xa4, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x7b, 0xd7, 0x17, 0xca, 0xe7, 0x01, 0x00, 0x00,
}
